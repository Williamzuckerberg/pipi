#include "stdio.h"
#include "string.h"
#include "KAES.h"

//constructor
KAES::KAES()
{
	
}

KAES::~KAES()
{
	
}

KAES::KAES(int keySize, unsigned char* keyBytes)
{
	SetNbNkNr(keySize);//初始化
	memcpy(key,keyBytes,keySize);
	KeyExpansion();
	// expand the seed key into a key schedule and store in w
}  // Aes constructor

void KAES::Cipher(unsigned char* input, unsigned char* output)  // encipher 16-bit input
{
	// state = input
	memset(&State[0][0],0,16);
	int i;
	for (i = 0; i < (4 * Nb); i++)//
	{
        State[i % 4][ i / 4] = input[i];
	}
	
	AddRoundKey(0);
	
	for (int round = 1; round <= (Nr - 1); round++)  // main round loop
	{
        SubBytes(); 
        ShiftRows();  
        MixColumns(); 
        AddRoundKey(round);
	}  // main round loop
	
	SubBytes();
	ShiftRows();
	AddRoundKey(Nr);
	
	// output = state
	for (i = 0; i < (4 * Nb); i++)
	{
        output[i] =  State[i % 4][ i / 4];
	}
	
}  // Cipher()

void KAES::InvCipher(unsigned char * input, unsigned char * output)  // decipher 16-bit input
{
	// state = input
	int i; 
	memset(&State[0][0],0,16);
	for (i = 0; i < (4 * Nb); i++)
	{
		State[i % 4][ i / 4] = input[i];
	}
	
	AddRoundKey(Nr);
	
	for (int round = Nr-1; round >= 1; round--)  // main round loop
	{
        InvShiftRows();
        InvSubBytes();
        AddRoundKey(round);
        InvMixColumns();
	}  // end main round loop for InvCipher
	
	InvShiftRows();
	InvSubBytes();
	AddRoundKey(0);
	
	// output = state
	for (i = 0; i < (4 * Nb); i++)
	{
        output[i] =  State[i % 4][ i / 4];
	}
	
}  // InvCipher()

void KAES::SetNbNkNr(int keyS)
{
	Nb = 4;     // block size always = 4 words = 16 bytes = 128 bits for AES
	Nk = 4;
	if (keyS == Bits128)
	{
		Nk = 4;   // key size = 4 words = 16 bytes = 128 bits
		Nr = 10;  // rounds for algorithm = 10
	}
	else if (keyS == Bits192)
	{
		Nk = 6;   // 6 words = 24 bytes = 192 bits
		Nr = 12;
	}
	else if (keyS == Bits256)
	{
		Nk = 8;   // 8 words = 32 bytes = 256 bits
		Nr = 14;
	}
}  // SetNbNkNr()



void KAES::AddRoundKey(int round)
{
	int r,c;
	for (r = 0; r < 4; r++)
	{
        for (c = 0; c < 4; c++)
        {//w:    4*x+y
			State[r][c]=(unsigned char)((int)State[r][c]^(int)w[4*((round*4)+c)+r]);
        }
	}
}  // AddRoundKey()

void KAES::SubBytes()
{
	int r,c;
	for (r = 0; r < 4; r++)
	{
        for (c = 0; c < 4; c++)
        {
			State[r][c] =  Sbox[ 16*(State[r][c] >> 4)+ ( State[r][c] & 0x0f) ];
        }
	}
}  // SubBytes

void KAES::InvSubBytes()
{
	int r,c;
	for (r = 0; r < 4; r++)
	{
        for (c = 0; c < 4; c++)
        {
			State[r][c] =  iSbox[ 16*( State[r][c] >> 4)+( State[r][c] & 0x0f) ];
        }
	}
}  // InvSubBytes

void KAES::ShiftRows()
{
	unsigned char temp[4*4];
	int r,c;
	for (r = 0; r < 4; r++)  // copy State into temp[]
	{
        for (c = 0; c < 4; c++)
        {
			temp[4*r+c] =  State[r][c];
        }
	}
	//??
	for (r = 1; r < 4; r++)  // shift temp into State
	{
        for (c = 0; c < 4; c++)
        {
			State[r][c] = temp[ 4*r+ (c + r) % Nb ];
        }
	}
}  // ShiftRows()

void KAES::InvShiftRows()
{
	unsigned char temp[4*4];
	int r,c;
	for (r = 0; r < 4; r++)  // copy State into temp[]
	{
        for (c = 0; c < 4; c++)
        {
			temp[4*r+c] =  State[r][c];
        }
	}
	for (r = 1; r < 4; r++)  // shift temp into State
	{
        for (c = 0; c < 4; c++)
        {
			State[r][ (c + r) % Nb ] = temp[4*r+c];
        }
	}
}  // InvShiftRows()

void KAES::MixColumns()
{
	unsigned char temp[4*4];
	int r,c;
	for (r = 0; r < 4; r++)  // copy State into temp[]
	{
        for (c = 0; c < 4; c++)
        {
			temp[4*r+c] =  State[r][c];
        }
	}
	
	for (c = 0; c < 4; c++)
	{
		State[0][c] = (unsigned char) ( (int)gfmultby02(temp[0+c]) ^ (int)gfmultby03(temp[4*1+c]) ^
			(int)gfmultby01(temp[4*2+c]) ^ (int)gfmultby01(temp[4*3+c]) );
		State[1][c] = (unsigned char) ( (int)gfmultby01(temp[0+c]) ^ (int)gfmultby02(temp[4*1+c]) ^
			(int)gfmultby03(temp[4*2+c]) ^ (int)gfmultby01(temp[4*3+c]) );
		State[2][c] = (unsigned char) ( (int)gfmultby01(temp[0+c]) ^ (int)gfmultby01(temp[4*1+c]) ^
			(int)gfmultby02(temp[4*2+c]) ^ (int)gfmultby03(temp[4*3+c]) );
		State[3][c] = (unsigned char) ( (int)gfmultby03(temp[0+c]) ^ (int)gfmultby01(temp[4*1+c]) ^
			(int)gfmultby01(temp[4*2+c]) ^ (int)gfmultby02(temp[4*3+c]) );
	}
}  // MixColumns

void KAES::InvMixColumns()
{
	unsigned char temp[4*4];
	int r,c;
	for (r = 0; r < 4; r++)  // copy State into temp[]
	{
        for (c = 0; c < 4; c++)
        {
			temp[4*r+c] =  State[r][c];
        }
	}
	
	for (c = 0; c < 4; c++)
	{
		State[0][c] = (unsigned char) ( (int)gfmultby0e(temp[c]) ^ (int)gfmultby0b(temp[4+c]) ^
			(int)gfmultby0d(temp[4*2+c]) ^ (int)gfmultby09(temp[4*3+c]) );
		State[1][c] = (unsigned char) ( (int)gfmultby09(temp[c]) ^ (int)gfmultby0e(temp[4+c]) ^
			(int)gfmultby0b(temp[4*2+c]) ^ (int)gfmultby0d(temp[4*3+c]) );
		State[2][c] = (unsigned char) ( (int)gfmultby0d(temp[c]) ^ (int)gfmultby09(temp[4+c]) ^
			(int)gfmultby0e(temp[4*2+c]) ^ (int)gfmultby0b(temp[4*3+c]) );
		State[3][c] = (unsigned char) ( (int)gfmultby0b(temp[c]) ^ (int)gfmultby0d(temp[4+c]) ^
			(int)gfmultby09(temp[4*2+c]) ^ (int)gfmultby0e(temp[4*3+c]) );
	}
}  // InvMixColumns

unsigned char KAES::gfmultby01(unsigned char b)
{
	return b;
}

unsigned char KAES::gfmultby02(unsigned char b)
{
	if (b < 0x80)
        return (unsigned char)(int)(b <<1);
	else
        return (unsigned char)( (int)(b << 1) ^ (int)(0x1b) );
}

unsigned char KAES::gfmultby03(unsigned char b)
{
	return (unsigned char) ( (int)gfmultby02(b) ^ (int)b );
}

unsigned char KAES::gfmultby09(unsigned char b)
{
	return (unsigned char)( (int)gfmultby02(gfmultby02(gfmultby02(b))) ^
		(int)b );
}

unsigned char KAES::gfmultby0b(unsigned char b)
{
	return (unsigned char)( (int)gfmultby02(gfmultby02(gfmultby02(b))) ^
		(int)gfmultby02(b) ^
		(int)b );
}

unsigned char KAES::gfmultby0d(unsigned char b)
{
	return (unsigned char)( (int)gfmultby02(gfmultby02(gfmultby02(b))) ^
		(int)gfmultby02(gfmultby02(b)) ^
		(int)(b) );
}

unsigned char KAES::gfmultby0e(unsigned char b)
{
	return (unsigned char)( (int)gfmultby02(gfmultby02(gfmultby02(b))) ^
		(int)gfmultby02(gfmultby02(b)) ^
		(int)gfmultby02(b) );
}

void KAES::KeyExpansion()
{
	unsigned char result[4],result2[4];
    memset(w,0,16*15);
	int row;
	for (row = 0; row < Nk; row++)//Nk=4,6,8
	{
		w[4*row+0] =  key[4*row];
		w[4*row+1] =  key[4*row+1];
		w[4*row+2] =  key[4*row+2];
		w[4*row+3] =  key[4*row+3];
	}

	unsigned char temp[4];
	
	for (row = Nk; row < Nb * (Nr+1); row++)
	{
        temp[0] =  w[4*(row-1)+0]; 
		temp[1] =  w[4*(row-1)+1];
        temp[2] =  w[4*(row-1)+2]; 
		temp[3] =  w[4*(row-1)+3];
		
        if (row % Nk == 0)  
        {
			RotWord(temp,result);
			SubWord(result,result2);
			memcpy(temp,result2,4);//
		    //RotWord 例程非常简单，它接受 4 字节的数组并将它们向左旋转位移 1 位。
	        //因为轮回次序表 w[] 有四列，所以 RotWord 会将一行 w[] 向左旋转位移.
			//SubWord 例程使用置换表 Sbox，针对密钥次序表 w[] 的给定行执行逐字节置换。
			temp[0] = (byte)( (int)temp[0] ^ (int) Rcon[4*(row/Nk)+0] );
			temp[1] = (byte)( (int)temp[1] ^ (int) Rcon[4*(row/Nk)+1] );
			temp[2] = (byte)( (int)temp[2] ^ (int) Rcon[4*(row/Nk)+2] );
			temp[3] = (byte)( (int)temp[3] ^ (int) Rcon[4*(row/Nk)+3] );
        }
        else if ( Nk > 6 && (row % Nk == 4) )  
        {
			SubWord(temp,result);
			memcpy(temp,result,4);
        }
        // w[row] = w[row-Nk] xor temp
		w[4*row+0] = (byte) ( (int) w[4*(row-Nk)+0] ^ (int)temp[0] );
		w[4*row+1] = (byte) ( (int) w[4*(row-Nk)+1] ^ (int)temp[1] );
		w[4*row+2] = (byte) ( (int) w[4*(row-Nk)+2] ^ (int)temp[2] );
		w[4*row+3] = (byte) ( (int) w[4*(row-Nk)+3] ^ (int)temp[3] );
	}  // for loop
}  // KeyExpansion()

void KAES::SubWord(unsigned char * word,unsigned char* result)
{//不要这样返回！
	result[0] =  Sbox[ 16*(word[0] >> 4)+ (word[0] & 0x0f) ];
	result[1] =  Sbox[ 16*(word[1] >> 4)+ (word[1] & 0x0f) ];
	result[2] =  Sbox[ 16*(word[2] >> 4)+ (word[2] & 0x0f) ];
	result[3] =  Sbox[ 16*(word[3] >> 4)+ (word[3] & 0x0f) ];
}

void KAES::RotWord(unsigned char * word,unsigned char *result)
{//不要这样返回
	result[0] = word[1];
	result[1] = word[2];
	result[2] = word[3];
	result[3] = word[0];
}

void KAES::Dump()
{
	//Console.WriteLine("Nb = " + Nb + " Nk = " + Nk + " Nr = " + Nr);
	//Console.WriteLine("\nThe key is \n" + DumpKey() );
	//Console.WriteLine("\nThe Sbox is \n" + DumpTwoByTwo(Sbox));
	//Console.WriteLine("\nThe w array is \n" + DumpTwoByTwo(w));
	//Console.WriteLine("\nThe State array is \n" + DumpTwoByTwo(State));
}

unsigned char * KAES::DumpKey()
{
	//	string s = "";
	//	for (int i = 0; i < key.Length; i++)
	//      s += key[i].ToString("x2") + " ";
	//return s;
	return NULL;
}

unsigned char * KAES::DumpTwoByTwo(unsigned char *  a)
{/*
	string s ="";
	for (int r = 0; r < a.GetLength(0); r++)
	{
	s += "["+r+"]" + " ";
	for (int c = 0; c < a.GetLength(1); c++)
	{
	s += a[r,c].ToString("x2") + " " ;
	}
	s += "\n";
	}
	return s;*/
	return NULL;
}

unsigned char input[1440] = {0x3B, 0x2E, 0xE9, 0x2F,
0xAE, 0xC5, 0x99, 0x11, 0x53, 0x69, 0xF2, 0xA0, 0x48, 0xB5, 0x3E, 0x79, 0x09, 0x37, 0xB0, 0xA0,
0x26, 0x86, 0xC1, 0x32, 0x2E, 0x2E, 0x45, 0x40, 0xF2, 0xFC, 0x87, 0x7D, 0x87, 0x72, 0x5B, 0xE0,
0xB1, 0xC5, 0x39, 0x3D, 0x06, 0xA8, 0x7F, 0x56, 0xDF, 0x43, 0x95, 0x50, 0x12, 0x88, 0xF3, 0xBE,
0x5F, 0x64, 0xC1, 0xC5, 0x9B, 0x67, 0x7D, 0x2B, 0x36, 0x73, 0x0F, 0xCA, 0x14, 0xAC, 0x45, 0xB4,
0x23, 0x4F, 0x86, 0x47, 0x45, 0x80, 0x4E, 0xF9, 0x96, 0x2D, 0x09, 0x64, 0x6C, 0x88, 0x87, 0x0F,
0x14, 0x8B, 0x6C, 0x4C, 0x6B, 0x92, 0xC1, 0xB1, 0x71, 0x11, 0x97, 0x0D, 0x5D, 0xA0, 0xE7, 0xB6,
0x62, 0x91, 0x75, 0x0A, 0x33, 0xCA, 0xE4, 0x4A, 0xAC, 0x07, 0x7F, 0x5F, 0x50, 0xF9, 0x34, 0x15,
0x26, 0xD3, 0x71, 0x62, 0x5E, 0xD2, 0x42, 0x9C, 0x16, 0x20, 0x62, 0xB1, 0x6B, 0x0C, 0x90, 0xFF,
0x1C, 0xD1, 0x38, 0xC0, 0x3D, 0xDD, 0xB1, 0x55, 0x12, 0xEE, 0x58, 0xD2, 0x54, 0xA0, 0x79, 0x2A,
0x1C, 0x86, 0x1F, 0x5A, 0x74, 0x68, 0xB6, 0x44, 0x07, 0x3F, 0x46, 0x68, 0x4F, 0x3D, 0x2A, 0x9F,
0xBD, 0xEB, 0xD0, 0x19, 0x78, 0x1D, 0x40, 0x64, 0xC9, 0x8E, 0xF8, 0xD5, 0x57, 0xED, 0xE9, 0xA4,
0xA4, 0x4D, 0x0F, 0x07, 0x67, 0xD9, 0x26, 0x5A, 0x67, 0x44, 0x23, 0x0C, 0x45, 0x7C, 0xD1, 0x7A,
0x06, 0x8E, 0xF4, 0x05, 0x69, 0x75, 0xDA, 0xD9, 0x61, 0x05, 0x9D, 0xBE, 0x60, 0xDC, 0x20, 0xB9,
0x71, 0x7D, 0x3E, 0x94, 0xD4, 0x2A, 0xC0, 0xF8, 0x52, 0x06, 0x92, 0x09, 0x7A, 0xB1, 0xF0, 0x8C,
0xC8, 0x30, 0xB1, 0x76, 0xB4, 0x39, 0x80, 0x67, 0x11, 0x4C, 0xF6, 0xF4, 0x8D, 0x97, 0xC8, 0xCA,
0x21, 0x22, 0xC1, 0xE7, 0x80, 0x83, 0x11, 0x05, 0xB8, 0x23, 0xC7, 0xAA, 0x00, 0x4E, 0x8F, 0x18,
0x98, 0x67, 0xFF, 0xFE, 0xF2, 0x14, 0x4B, 0xA3, 0x97, 0x31, 0xCC, 0xBA, 0xE8, 0x2E, 0xB4, 0xED,
0xE2, 0x80, 0x72, 0x4C, 0x51, 0xB0, 0x1E, 0xA4, 0xB7, 0x60, 0xCE, 0x24, 0x5D, 0x75, 0x87, 0x0B,
0x2E, 0x82, 0x81, 0xE9, 0xE8, 0x27, 0xBF, 0xBF, 0x34, 0x0A, 0x41, 0x98, 0xA9, 0xC5, 0xEA, 0xCD,
0xBE, 0x05, 0xE5, 0x1A, 0x44, 0xC4, 0xAB, 0xEA, 0xE4, 0xC7, 0xEC, 0x61, 0x95, 0x30, 0x3E, 0x50,
0xCF, 0x8A, 0xEC, 0x1C, 0x35, 0x50, 0x6F, 0x7F, 0x51, 0xB1, 0x9F, 0xB8, 0x24, 0x34, 0x8B, 0x86,
0x64, 0xE0, 0x5F, 0x22, 0x37, 0xEA, 0xB8, 0x7F, 0x4A, 0x0D, 0x7A, 0x57, 0xF0, 0xE2, 0x3E, 0x71,
0x3D, 0x23, 0x36, 0x77, 0xF8, 0x58, 0x71, 0x89, 0x76, 0x2D, 0x18, 0x7C, 0xD1, 0x4C, 0xB1, 0x03,
0x50, 0x8C, 0xB6, 0x0B, 0xC4, 0xE3, 0x09, 0x31, 0xEF, 0x97, 0x7F, 0xE9, 0x4E, 0x01, 0x93, 0xD8,
0x42, 0x7B, 0x75, 0x4F, 0x9F, 0xEC, 0xC0, 0xC8, 0x46, 0x9A, 0xAD, 0x0C, 0xAA, 0xF4, 0x92, 0x26,
0x0E, 0x74, 0xCA, 0xBC, 0xFF, 0xB7, 0xD2, 0xC8, 0xBE, 0x1C, 0x49, 0x81, 0x5E, 0xCD, 0x7C, 0xB9,
0x11, 0x8D, 0xBF, 0x57, 0x5C, 0x4F, 0x47, 0x2B, 0x11, 0xA0, 0x96, 0x7C, 0xA9, 0x94, 0x95, 0x02,
0xDA, 0xCD, 0xA2, 0xDB, 0xB4, 0x9E, 0x95, 0x5B, 0x86, 0xF3, 0x61, 0x21, 0xC1, 0xAD, 0x91, 0x0E,
0x3E, 0xC5, 0xE1, 0x84, 0x28, 0x47, 0x79, 0xD5, 0x7C, 0xC8, 0x84, 0xFC, 0xAA, 0x4F, 0xFD, 0x6C,
0x95, 0x70, 0x2A, 0x38, 0x68, 0xD5, 0x4B, 0x95, 0x9B, 0xAC, 0x77, 0xB0, 0xD9, 0x24, 0xE5, 0x07,
0x34, 0xDA, 0x13, 0xD9, 0x80, 0xAC, 0x95, 0xC8, 0x40, 0xF2, 0x95, 0xAA, 0xEF, 0x0B, 0xEE, 0x82,
0xF5, 0xFF, 0xDE, 0x63, 0xD3, 0xD6, 0x6A, 0xB5, 0x5A, 0x51, 0xB4, 0xDA, 0x80, 0xAD, 0x59, 0x77,
0xFD, 0x96, 0x05, 0xBC, 0x7B, 0x48, 0xBD, 0x7F, 0x39, 0x1B, 0x02, 0x4C, 0xA8, 0x01, 0x78, 0x47,
0xDE, 0x3E, 0xD5, 0xF1, 0xA1, 0x31, 0x1D, 0xF5, 0xC2, 0xF5, 0x1A, 0x48, 0x87, 0x59, 0x16, 0x91,
0x1C, 0x8E, 0xCA, 0x98, 0x11, 0x12, 0x97, 0xF9, 0xE3, 0x86, 0x66, 0xCE, 0xD7, 0x50, 0xCF, 0x9A,
0x00, 0xC9, 0x88, 0xCB, 0x28, 0x20, 0x3C, 0x1C, 0xC6, 0x87, 0x1A, 0x22, 0x83, 0x7E, 0x66, 0xF8,
0xD4, 0x51, 0xCB, 0x70, 0x7E, 0xE9, 0x9B, 0xA4, 0x26, 0x86, 0xA3, 0x90, 0x78, 0xA7, 0x89, 0xA7,
0x7D, 0x9B, 0x8A, 0x04, 0xC7, 0x20, 0x75, 0x63, 0x1F, 0xDA, 0xCF, 0xCE, 0x00, 0x0D, 0x96, 0x52,
0x7B, 0xD3, 0x24, 0xA6, 0xFB, 0xEB, 0x79, 0x86, 0x8B, 0x92, 0x29, 0x7F, 0x84, 0xA1, 0x56, 0x8A,
0x9C, 0x01, 0xB4, 0xD3, 0x04, 0x4D, 0xDC, 0xBF, 0x0B, 0x9A, 0xAD, 0xDC, 0xF8, 0x23, 0xD6, 0x7D,
0x55, 0xCF, 0xE2, 0x7A, 0x20, 0x8D, 0xAC, 0x0E, 0xFB, 0x1E, 0x12, 0x4E, 0x7D, 0xD2, 0x50, 0x41,
0xD2, 0xE5, 0xEB, 0xFC, 0x62, 0x3D, 0x8E, 0x4A, 0xE3, 0xB6, 0x20, 0x47, 0x73, 0xE4, 0x33, 0xFE,
0x5D, 0x11, 0x52, 0x99, 0x01, 0x18, 0x13, 0x61, 0xAE, 0x8C, 0xE2, 0x15, 0x94, 0xDC, 0x28, 0x67,
0x30, 0x53, 0x9F, 0xD9, 0x40, 0x8E, 0x01, 0x8C, 0xFD, 0x06, 0x54, 0x65, 0x33, 0xF3, 0xCC, 0x05,
0x03, 0x82, 0x2E, 0x90, 0x09, 0x68, 0xD6, 0x2E, 0xC5, 0x48, 0x82, 0x93, 0xAA, 0x88, 0xFA, 0x0C,
0x3E, 0x12, 0xF3, 0x50, 0x18, 0xDC, 0xE2, 0xB9, 0x52, 0x06, 0xF2, 0xCB, 0xEB, 0x0A, 0x4D, 0x25,
0xF6, 0x13, 0x47, 0x74, 0x34, 0x8D, 0x13, 0x3D, 0x0A, 0x59, 0x68, 0xC1, 0xDA, 0x79, 0x28, 0xA7,
0xD0, 0x65, 0x30, 0xBB, 0x64, 0xE2, 0x2E, 0xD0, 0x0D, 0xD4, 0x1B, 0x24, 0xEE, 0x89, 0xD6, 0x9F,
0x73, 0xAE, 0x25, 0x19, 0xF1, 0x42, 0xD7, 0x8F, 0x72, 0xD6, 0xA6, 0xC7, 0x10, 0x26, 0x2F, 0x22,
0xC4, 0x2C, 0x00, 0xF1, 0xFD, 0xB8, 0xE8, 0x6E, 0xFD, 0x53, 0x18, 0x7E, 0x63, 0x49, 0xD1, 0xAE,
0x3B, 0x81, 0x26, 0x9C, 0x38, 0xBE, 0x8F, 0x1D, 0xB1, 0x98, 0xB6, 0x86, 0x25, 0x8D, 0xA5, 0x88,
0x25, 0x78, 0x0B, 0x8F, 0x1C, 0xE8, 0x1D, 0xCE, 0xB6, 0xE7, 0x0B, 0x9C, 0xE9, 0x61, 0xA9, 0x2A,
0x6F, 0xD8, 0x0D, 0xA2, 0x93, 0x61, 0xCF, 0xBD, 0x3C, 0x71, 0x84, 0x80, 0x9C, 0xC4, 0xE3, 0xC1,
0x48, 0x26, 0x85, 0x14, 0x7C, 0xC8, 0xF6, 0xFA, 0x8A, 0xF6, 0xAF, 0xB8, 0x9E, 0xFD, 0xFD, 0x0C,
0x38, 0x7B, 0x64, 0x1C, 0x30, 0x6B, 0x03, 0xEC, 0x4F, 0x4F, 0x48, 0x73, 0x5E, 0x5E, 0x6E, 0xEA,
0x36, 0x25, 0x95, 0x5F, 0x0D, 0xB4, 0x7F, 0x5A, 0x85, 0x75, 0xD0, 0x82, 0xB8, 0xD7, 0x3B, 0x09,
0x23, 0x44, 0xD0, 0x7D, 0xD5, 0x1E, 0xFE, 0xAB, 0x19, 0x9B, 0x57, 0xEF, 0xD1, 0x7A, 0xF8, 0x74,
0x4E, 0xFE, 0x93, 0xF0, 0xB7, 0xC0, 0xAF, 0x01, 0x64, 0x8D, 0xC4, 0xB2, 0x2A, 0xB7, 0x08, 0x43,
0xEF, 0x93, 0x71, 0x13, 0x1C, 0x8E, 0xE1, 0x02, 0xC6, 0xEA, 0x4C, 0x18, 0x67, 0xFF, 0xDA, 0x84,
0xD1, 0x19, 0x69, 0xA1, 0x6A, 0xDF, 0x5B, 0xDF, 0x1F, 0x4F, 0x38, 0x41, 0x5A, 0xC6, 0x8B, 0xBF,
0xBA, 0xE8, 0x11, 0x0C, 0xA4, 0x5A, 0xC9, 0x54, 0xFF, 0x6B, 0x08, 0xBE, 0x0E, 0x3D, 0x37, 0x21,
0x59, 0xF8, 0xEB, 0x3B, 0x36, 0x48, 0xD2, 0xBE, 0x64, 0x5F, 0xE8, 0xD9, 0x78, 0x26, 0x60, 0x9B,
0x1F, 0xC3, 0x9B, 0x0D, 0xA1, 0xF8, 0xA1, 0xCA, 0x15, 0xB0, 0x49, 0x12, 0xFF, 0x7F, 0x12, 0x42,
0x24, 0x4E, 0x3A, 0x4C, 0x20, 0x5D, 0x62, 0x09, 0x8A, 0xA4, 0x19, 0xCE, 0xED, 0x2C, 0xDF, 0xD1,
0x5A, 0xC3, 0xB8, 0x3B, 0x79, 0x29, 0x99, 0xAD, 0x38, 0x0A, 0x00, 0x0D, 0x31, 0xBB, 0x51, 0x27,
0x26, 0xE0, 0x48, 0xDB, 0x1D, 0x1B, 0x9B, 0x23, 0x37, 0xD0, 0x85, 0x10, 0x09, 0xB8, 0x72, 0x32,
0x68, 0xFC, 0x1E, 0x8B, 0x11, 0x71, 0xC5, 0xD5, 0x55, 0x17, 0x25, 0x30, 0x56, 0xA5, 0x16, 0x74,
0x97, 0xF9, 0x84, 0x0D, 0x16, 0xAF, 0x71, 0x3A, 0x66, 0x9C, 0xBD, 0xB4, 0xD2, 0xAC, 0xD6, 0xE3,
0x79, 0x33, 0x9B, 0xB4, 0x48, 0xAF, 0x1F, 0x8E, 0x7A, 0x00, 0x1E, 0xDE, 0xB4, 0xEF, 0xF9, 0xB3,
0x14, 0x8E, 0xE1, 0x4F, 0xD0, 0x59, 0x2E, 0x97, 0x91, 0x8A, 0xB9, 0xDB, 0x72, 0xBD, 0x26, 0x18,
0xDA, 0x9F, 0xF8, 0xCC, 0xE1, 0x3E, 0x74, 0x5D, 0xCA, 0x40, 0xC3, 0x37, 0x29, 0x5E, 0xAC, 0x3A,
0xCB, 0x4D, 0xF4, 0x48, 0xD3, 0xDE, 0x18, 0xC5, 0xBF, 0x90, 0x9C, 0xAE, 0x9F, 0xF8, 0xE1, 0xDD,
0x3A, 0x36, 0xA0, 0x61, 0xC3, 0x01, 0x73, 0x9B, 0x6D, 0x1F, 0x34, 0xA2, 0xE8, 0x75, 0x48, 0x35,
0x4E, 0xD0, 0xB3, 0x5F, 0x06, 0xB0, 0xD2, 0x7E, 0x00, 0x7B, 0x7D, 0xB1, 0xE4, 0xCA, 0xD6, 0x48,
0xEF, 0x8D, 0xED, 0x2F, 0x88, 0x32, 0x7F, 0x5B, 0xB2, 0xB8, 0x06, 0xCC, 0x13, 0x04, 0x4F, 0x28,
0x97, 0x55, 0xFC, 0x0E, 0x57, 0x91, 0x42, 0x92, 0x0C, 0x20, 0x6F, 0x42, 0x5E, 0x30, 0xA8, 0x0B,
0x6A, 0xFC, 0xC4, 0xB2, 0x43, 0x89, 0x0E, 0xC0, 0x14, 0xF7, 0x8F, 0xF8, 0x3E, 0xBB, 0xCB, 0x77,
0xC4, 0x09, 0x12, 0xBA, 0x99, 0x28, 0xAA, 0x5F, 0xBA, 0x3E, 0x05, 0xC6, 0xDD, 0xB8, 0xBA, 0x3C,
0x5C, 0xBB, 0x5A, 0x23, 0x83, 0xD5, 0x0A, 0x81, 0x71, 0xEB, 0xDC, 0x91, 0x9A, 0xDC, 0x33, 0x4B,
0x86, 0x10, 0xAC, 0x2D, 0xC5, 0x84, 0x8D, 0xC5, 0xB0, 0xC1, 0x41, 0x4A, 0x60, 0xFA, 0xBC, 0xC9,
0xA9, 0x11, 0xD3, 0x7E, 0x1D, 0x2B, 0x05, 0xFD, 0x7B, 0x37, 0x53, 0x5B, 0xAC, 0x42, 0xBA, 0x7C,
0x47, 0x3A, 0x44, 0x52, 0x0B, 0xEF, 0xF9, 0x10, 0x7E, 0x76, 0xD9, 0x0B, 0x33, 0x2D, 0xAB, 0x5B,
0x1F, 0x6D, 0xA2, 0x21, 0x9F, 0x80, 0xE6, 0xC4, 0xB2, 0x86, 0x5E, 0x73, 0x0E, 0x80, 0xED, 0x5F,
0x5D, 0xB1, 0x67, 0xA1, 0x24, 0x27, 0x25, 0x5B, 0x54, 0xBB, 0x7B, 0x4F, 0xD2, 0x69, 0x8B, 0x66,
0xEB, 0xE8, 0x41, 0x1E, 0xDE, 0xC2, 0x0F, 0x44, 0xF1, 0xE2, 0x80, 0xA8, 0x38, 0xA0, 0xAF, 0x4C,
0x86, 0x00, 0x8C, 0x43, 0xBF, 0x10, 0x40, 0xB8, 0x32, 0x00, 0xBD, 0xAA, 0xF7, 0xEB, 0x5C, 0xD3,
0x81, 0x64, 0x32, 0xA0, 0x59, 0x3E, 0xA6, 0x7B, 0xD2, 0x07, 0x72, 0xF7, 0x0C, 0x23, 0x4A, 0xA5,
0xCC, 0xFF, 0xEC, 0x88, 0xD0, 0xAB, 0x60, 0xCE, 0x3D, 0x34, 0x19, 0xE1, 0x50, 0xE1, 0xB6, 0x79,
0xD4, 0x15, 0x58, 0x14, 0xC0, 0x43, 0xEB, 0xFC, 0x58, 0x66, 0x4A, 0x24, 0x17, 0xE4, 0x0B, 0x6F,
0xB3, 0xA2, 0xF4, 0x07, 0x45, 0x32, 0xFF, 0x4A, 0x4C, 0xCD, 0xCF, 0xAD};

unsigned char output[16] = {0};

int main()
{
	unsigned char key[16] = {0xea, 0x2d, 0xb3, 0x5a, 0x17, 0x3e, 0xbd, 0x8d, 0x9e, 0x1a, 0x3d, 0xc1, 0xea, 0x2b, 0x95, 0x40};
	KAES aes(16, key);
	unsigned char *input_ptr = input;
	for (int i=0; i<90; i++)
	{
		input_ptr += 16;
		aes.InvCipher(input_ptr, output);
		for (int i=0; i<16; i++)
		{
			printf("%02x ", output[i]);
		}
		printf("\n");
	}
	return 0;
}
