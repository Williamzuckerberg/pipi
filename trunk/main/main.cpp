#include <iostream>
#include <stdlib.h>
#include <sys/socket.h>
#include <netinet/in.h>   
#include <arpa/inet.h>
#include "../base64/base64.h"
#include "pipi.h"

using namespace std;

int main(int argc, char *argv[])
{
  int rc;

  /********************************************/
  //1.ADDRESS PROCESS
  /********************************************/
  //input download addr
  char addr_input[128], *addr_in;
  cout<<"Please input the download addr:"<<endl;
  cin>>addr_input;
  addr_in = addr_input;
  //check addr head is  'thunder://'
  if (0 == strncmp(addr_input, "thunder://", 10))
  {
      addr_in += 10;
  }
   
  //translate addr
  char addr_output[128], *addr_out;
  Base64 base64;
  rc = base64.decode(addr_in, addr_output);
  if (RC_SUCCESS != rc)
  {
    cout<<"error occur!"<<endl;
	return RC_ERROR;
  }

  //check addr head is "AA", and tail is "ZZ"
  {
  	int len = strlen(addr_output);
	addr_out = addr_output + (len - 2);
	if (0 == strncmp(addr_out, "ZZ", 2))
	{
	  *addr_out = '\0';
	}
	addr_out = addr_output;
	if (0 == strncmp(addr_out, "AA", 2))
	{
	  addr_out += 2;
	}

	cout<<addr_out<<endl;
  }

  //NEED TO DO: check addr_out is a correct addr

  //NEED TO DO: the input address may be not encode by BASE64, maybe is normal address,
  //                    these address should be support later.


  /********************************************/
  //2.CREATE CONNECTION
  /********************************************/
  //create socket
  int sockfd; 
  if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) == -1)
  { 
    cout<<"create socket error!"<<endl;
    return RC_ERROR;
  }

  //connect socket
  struct sockaddr_in serv_addr;  
  serv_addr.sin_family = AF_INET;
  serv_addr.sin_port = htons(SERVPORT);
  serv_addr.sin_addr.s_addr = inet_addr(SERVIP);
  bzero(&(serv_addr.sin_zero), 8);

  if (connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(struct sockaddr)) == -1)
  {
    cout<<"connect socket error!"<<endl;
    return RC_ERROR;
  }
  cout<<"connect socket success!"<<endl;

  //send a fake request
  char msg[282] = {
      0x50, 0x4F, 0x53, 0x54, 0x20, 0x2F, 0x20, 0x48, 0x54, 0x54, 0x50, 0x2F, 0x31, 0x2E, 0x31, 0x0D,
      0x0A, 0x48, 0x6F, 0x73, 0x74, 0x3A, 0x20, 0x35, 0x38, 0x2E, 0x32, 0x35, 0x34, 0x2E, 0x33, 0x39,
      0x2E, 0x36, 0x3A, 0x38, 0x30, 0x0D, 0x0A, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x2D, 0x74,
      0x79, 0x70, 0x65, 0x3A, 0x20, 0x61, 0x70, 0x70, 0x6C, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E,
      0x2F, 0x6F, 0x63, 0x74, 0x65, 0x74, 0x2D, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x0D, 0x0A, 0x43,
      0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x2D, 0x4C, 0x65, 0x6E, 0x67, 0x74, 0x68, 0x3A, 0x20, 0x31,
      0x35, 0x36, 0x0D, 0x0A, 0x43, 0x6F, 0x6E, 0x6E, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x3A, 0x20,
      0x4B, 0x65, 0x65, 0x70, 0x2D, 0x41, 0x6C, 0x69, 0x76, 0x65, 0x0D, 0x0A, 0x0D, 0x0A, 0x34, 0x00,
      0x00, 0x00, 0x82, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x7F, 0xAA, 0x9D, 0x15, 0x94, 0x35,
      0xE4, 0x42, 0xA7, 0xE0, 0xDF, 0xDC, 0x41, 0x24, 0xA2, 0xB5, 0x17, 0x07, 0x55, 0xC8, 0x16, 0x00,
      0xE5, 0x5F, 0xB5, 0x95, 0x2A, 0x7B, 0x4C, 0x19, 0x46, 0x09, 0x73, 0x77, 0x55, 0xF5, 0x71, 0xCD,
      0x9D, 0xCD, 0x17, 0xF6, 0xAD, 0x25, 0xA2, 0x65, 0x3F, 0xB1, 0xBD, 0xCE, 0x2D, 0x62, 0x34, 0x2E,
      0x68, 0xEB, 0xF6, 0x86, 0x28, 0x2D, 0x45, 0xC2, 0x41, 0x9A, 0x09, 0x48, 0x7A, 0xFC, 0xB8, 0x90,
      0x24, 0x94, 0xF9, 0xB0, 0x63, 0x63, 0xA1, 0x3E, 0xB2, 0xE3, 0x60, 0x66, 0x51, 0xF0, 0x58, 0x41,
      0xAB, 0x0D, 0xDE, 0x99, 0x33, 0x61, 0xAF, 0xC1, 0x84, 0x92, 0x7C, 0x02, 0xF2, 0x85, 0x2B, 0x28,
      0x38, 0x94, 0x2C, 0xB7, 0x3C, 0xD2, 0x46, 0xE0, 0x98, 0xC2, 0x13, 0x54, 0x14, 0xBC, 0x64, 0xCA,
      0x43, 0xF2, 0xB6, 0x70, 0xAF, 0x5A, 0xF1, 0x08, 0xCF, 0x8E, 0xA8, 0x95, 0xF5, 0xCE, 0xFA, 0x8D,
      0xC5, 0xA1, 0x5C, 0xA3, 0x53, 0x98, 0x87, 0xC0, 0x05, 0x15};
  int sent_count = 0;
  sent_count = send(sockfd, msg, 282, 0);
  if (282 != sent_count)
  {
    cout<<"send msg error!"<<endl;
    close(sockfd);
    return RC_ERROR;
  }

  int recved_count = 0;
  unsigned char recv_buffer[1460] = {0};
  unsigned char recv_resp[1] = {0};
  int resp_count = 0;
  int recv_flag = 0;
  int pkt_size = 0;
  while(1)
  {
    if ((recved_count = recv(sockfd, recv_buffer, 1460, 0)) == -1)
    {
      cout<<"recv msg error!"<<endl;
      close(sockfd);
      return RC_ERROR;
    }

    //check received message
    //if recv_buffer not equal to recv_flag, continue recv from server
    if (0 == (memcmp(recv_buffer, recv_constant, 8)))
    {
        //get packet size
        unsigned char *buffer_ptr = recv_buffer;
        buffer_ptr += 8;
        pkt_size = *((int *)buffer_ptr);
        cout<<"pkt_size="<<pkt_size<<endl;
        recved_count  -= 12;
        recv_flag = 1;//start recv packet
     }

    //process packet and save result in file
    while((1 == recv_flag) && (pkt_size - recved_count > 0))
    {
        
    }

    //if recv finish, exit while(1)
    if (pkt_size - recved_count > 0)
    {
        break;
    }

    //one recv, one response
    resp_count = send(sockfd, recv_resp, 0, 0);
    if (-1 == sent_count)
    {
      cout<<"send resp error!"<<endl;
      close(sockfd);
      return RC_ERROR;
    }    
  }

  close(sockfd);
  //system("PAUSE");	
  return 0;
}
